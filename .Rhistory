?bag
??bag
install.packages('ElemStatLearn')
??bagging
install.packages('adabag')
knitr::opts_chunk$set(echo = TRUE)
source(Source.R)
source('Source.R')
source('Source_Bagging.R')
data()
data(packege = 'adabag')
?ozone
data("CO2")
force(CO2)
data("AirPassengers")
force(AirPassengers)
data("rock")
force(rock)
SpamBase <-  read.csv('https://archive.ics.uci.edu/ml/machine-learning-databases/spambase/spambase.data', header = FALSE)
SpamBase <-  read.csv('https://archive.ics.uci.edu/ml/machine-learning-databases/spambase/spambase.data', header = FALSE)
DT::datatable(SpamBase)
DT::datatable(SpamBase)
SpamBase.Names <-  readLines('https://archive.ics.uci.edu/ml/machine-learning-databases/spambase/spambase.names')
SpamBase.Names
SpamBase.Doc <-  readLines('https://archive.ics.uci.edu/ml/machine-learning-databases/spambase/spambase.data')
SpamBase.Doc
SB_colname <- c(
'word_freq_make',
'word_freq_address',
'word_freq_all',
'word_freq_3d',
'word_freq_our',
'word_freq_over',
'word_freq_remove',
'word_freq_internet',
'word_freq_order',
'word_freq_mail',
'word_freq_receive',
'word_freq_will',
'word_freq_people',
'word_freq_report',
'word_freq_addresses',
'word_freq_free',
'word_freq_business',
'word_freq_email',
'word_freq_you',
'word_freq_credit',
'word_freq_your',
'word_freq_font',
'word_freq_000',
'word_freq_money',
'word_freq_hp',
'word_freq_hpl',
'word_freq_george',
'word_freq_650',
'word_freq_lab',
'word_freq_labs',
'word_freq_telnet',
'word_freq_857',
'word_freq_data',
'word_freq_415',
'word_freq_85',
'word_freq_technology',
'word_freq_1999',
'word_freq_parts',
'word_freq_pm',
'word_freq_direct',
'word_freq_cs',
'word_freq_meeting',
'word_freq_original',
'word_freq_project',
'word_freq_re',
'word_freq_edu',
'word_freq_table',
'word_freq_conference',
'char_freq_;',
'char_freq_(',
'char_freq_[',
'char_freq_!',
'char_freq_$',
'char_freq_#',
'capital_run_length_average',
'capital_run_length_longest',
'capital_run_length_total'
)
colnames(SpamBase) <- SB_colname
# Check Column Name
DT::datatable(SpamBase)
length(SB_colname)
View(SpamBase)
SB_colname <- c(
'word_freq_make',
'word_freq_address',
'word_freq_all',
'word_freq_3d',
'word_freq_our',
'word_freq_over',
'word_freq_remove',
'word_freq_internet',
'word_freq_order',
'word_freq_mail',
'word_freq_receive',
'word_freq_will',
'word_freq_people',
'word_freq_report',
'word_freq_addresses',
'word_freq_free',
'word_freq_business',
'word_freq_email',
'word_freq_you',
'word_freq_credit',
'word_freq_your',
'word_freq_font',
'word_freq_000',
'word_freq_money',
'word_freq_hp',
'word_freq_hpl',
'word_freq_george',
'word_freq_650',
'word_freq_lab',
'word_freq_labs',
'word_freq_telnet',
'word_freq_857',
'word_freq_data',
'word_freq_415',
'word_freq_85',
'word_freq_technology',
'word_freq_1999',
'word_freq_parts',
'word_freq_pm',
'word_freq_direct',
'word_freq_cs',
'word_freq_meeting',
'word_freq_original',
'word_freq_project',
'word_freq_re',
'word_freq_edu',
'word_freq_table',
'word_freq_conference',
'char_freq_;',
'char_freq_(',
'char_freq_[',
'char_freq_!',
'char_freq_$',
'char_freq_#',
'capital_run_length_average',
'capital_run_length_longest',
'capital_run_length_total',
'is_spam'
)
colnames(SpamBase) <- SB_colname
# Check Column Name
DT::datatable(SpamBase)
# Check Column Name
SpamBase %>% head() %>% DT::datatable()
library(dplyr) # data manipulation
library(magrittr) # %<>%
library(adabag) # bagging
# Check Column Name
SpamBase %>% head() %>% DT::datatable()
# Missing Value Num
SpamBase %>% is.na() %>% sum()
?bagging
formula_bagging <- formula()
data_bagging <- SpamBase
control.Tree <- rpart::rpart.control(
minsplit = 2, # min obs. in node --- too small cause over-fitting
minbucket = 1, # min obs. in leaf--- too small cause over-fitting
cp = 0, # complex parameter --- too small cause over-fitting
xval = 10, # cross validation
maxdepth = 30, # The root node counted as depth 0
maxcompete = 4,
maxsurrogate = 5,
usesurrogate = 2,
surrogatestyle = 0)
bagging(formula = formula_bagging,
data = data_bagging,
mfinal = 100, # the number of trees to use
control = control.Tree,
par = TRUE # parallel calc.
)
formula_bagging <- formula(is_spam~.)
data_bagging <- SpamBase
control.Tree <- rpart::rpart.control(
minsplit = 2, # min obs. in node --- too small cause over-fitting
minbucket = 1, # min obs. in leaf--- too small cause over-fitting
cp = 0, # complex parameter --- too small cause over-fitting
xval = 10, # cross validation
maxdepth = 30, # The root node counted as depth 0
maxcompete = 4,
maxsurrogate = 5,
usesurrogate = 2,
surrogatestyle = 0)
## Model
```{r}
bagging(formula = formula_bagging,
data = data_bagging,
mfinal = 100, # the number of trees to use
control = control.Tree,
par = TRUE # parallel calc.
)
formula_bagging <- formula(is_spam~.)
data_bagging <- SpamBase
control.Tree <- rpart::rpart.control(
minsplit = 2, # min obs. in node --- too small cause over-fitting
minbucket = 1, # min obs. in leaf--- too small cause over-fitting
cp = 0, # complex parameter --- too small cause over-fitting
xval = 10, # cross validation
maxdepth = 30, # The root node counted as depth 0
maxcompete = 4,
maxsurrogate = 5,
usesurrogate = 2,
surrogatestyle = 0)
model.Bagging <- bagging(formula = formula_bagging,
data = data_bagging,
mfinal = 100, # the number of trees to use
control = control.Tree,
par = TRUE # parallel calc.
)
model.Bagging <- bagging(
formula = formula_bagging,
data = data_bagging,
mfinal = 100, # the number of trees to use
control = control.Tree,
par = FALSE # parallel calc.
)
View(SpamBase)
class(SpamBase)
model.Bagging <- bagging(
formula = formula_bagging,
data = data_bagging,
mfinal = 50, # the number of trees to use
control = control.Tree,
par = FALSE # parallel calc.
)
model.Bagging <- bagging(
formula = formula_bagging,
data = data_bagging,
mfinal = 50, # the number of trees to use
#control = control.Tree,
par = FALSE # parallel calc.
)
library(rpart)
library(mlbench)
data(Vehicle)
l <- length(Vehicle[,1])
sub <- sample(1:l,2*l/3)
Vehicle.bagging <- bagging(Class ~.,data=Vehicle[sub, ],mfinal=5,
control=rpart.control(maxdepth=5, minsplit=15))
#Using the pruning option
Vehicle.bagging.pred <- predict.bagging(Vehicle.bagging,newdata=Vehicle[-sub, ], newmfinal=3)
Vehicle.bagging.pred$confusion
Vehicle.bagging.pred$error
control.Tree <- rpart::rpart.control(
minsplit = 15, # min obs. in node --- too small cause over-fitting
minbucket = 1, # min obs. in leaf--- too small cause over-fitting
cp = 0, # complex parameter --- too small cause over-fitting
xval = 10, # cross validation
maxdepth = 30, # The root node counted as depth 0
maxcompete = 4,
maxsurrogate = 5,
usesurrogate = 2,
surrogatestyle = 0)
model.Bagging <- bagging(
formula = formula_bagging,
data = data_bagging,
mfinal = 5, # the number of trees to use
control = control.Tree,
par = FALSE # parallel calc.
)
model.Bagging <- bagging(
formula = is_spam~.,
data = data_bagging,
mfinal = 5, # the number of trees to use
control = control.Tree,
par = FALSE # parallel calc.
)
formula_bagging <- formula(is_spam ~ .)
data_bagging <- SpamBase
control.Tree <- rpart::rpart.control(
minsplit = 15, # min obs. in node --- too small cause over-fitting
minbucket = 1, # min obs. in leaf--- too small cause over-fitting
cp = 0, # complex parameter --- too small cause over-fitting
xval = 10, # cross validation
maxdepth = 30, # The root node counted as depth 0
maxcompete = 4,
maxsurrogate = 5,
usesurrogate = 2,
surrogatestyle = 0)
model.Bagging <- bagging(
formula = formula_bagging,
data = data_bagging,
mfinal = 5, # the number of trees to use
control = control.Tree,
par = FALSE # parallel calc.
)
Vehicle %>% class
Vehicle
data_bagging
SpamBase <-  read.csv('https://archive.ics.uci.edu/ml/machine-learning-databases/spambase/spambase.data', header = FALSE)
SpamBase[,V58]
SpamBase[,'V58']
formula_bagging <- formula(V58 ~ .)
data_bagging <- SpamBase
control.Tree <- rpart::rpart.control(
minsplit = 15, # min obs. in node --- too small cause over-fitting
minbucket = 1, # min obs. in leaf--- too small cause over-fitting
cp = 0, # complex parameter --- too small cause over-fitting
xval = 10, # cross validation
maxdepth = 30, # The root node counted as depth 0
maxcompete = 4,
maxsurrogate = 5,
usesurrogate = 2,
surrogatestyle = 0)
formula_bagging <- formula(V58 ~ .)
data_bagging <- SpamBase
control.Tree <- rpart::rpart.control(
minsplit = 15, # min obs. in node --- too small cause over-fitting
minbucket = 1, # min obs. in leaf--- too small cause over-fitting
cp = 0, # complex parameter --- too small cause over-fitting
xval = 10, # cross validation
maxdepth = 30, # The root node counted as depth 0
maxcompete = 4,
maxsurrogate = 5,
usesurrogate = 2,
surrogatestyle = 0)
model.Bagging <- bagging(
formula = formula_bagging,
data = data_bagging,
mfinal = 5, # the number of trees to use
control = control.Tree,
par = FALSE # parallel calc.
)
model.Bagging
model.Bagging
model.Bagging <- bagging(
formula = formula_bagging,
data = data_bagging,
mfinal = 5, # the number of trees to use
control = control.Tree,
par = FALSE # parallel calc.
)
data_bagging <- SpamBase
formula_bagging <- formula(V58 ~ .)
control.Tree <- rpart::rpart.control(
minsplit = 15, # min obs. in node --- too small cause over-fitting
minbucket = 1, # min obs. in leaf--- too small cause over-fitting
cp = 0, # complex parameter --- too small cause over-fitting
xval = 10, # cross validation
maxdepth = 30, # The root node counted as depth 0
maxcompete = 4,
maxsurrogate = 5,
usesurrogate = 2,
surrogatestyle = 0)
model.Bagging <- bagging(
formula = formula_bagging,
data = data_bagging,
mfinal = 5, # the number of trees to use
control = control.Tree,
par = FALSE # parallel calc.
)
